#!/usr/bin/env bash
set -eo pipefail
OS="$(uname -s)"

declare USE_SSH=0
declare APP_NAME_SUPPORTED=1
#Set branch to master unless specified by the user
declare -x TV_BRANCH="${TV_BRANCH:-"main"}"
declare -xr TV_REMOTE="${TV_REMOTE:-quantumfate/TestVim.git}"
declare NVIM_APPNAME="tvim"

declare -xr TESTNVIM_CONFIG_DIR="${TESTNVIM_CONFIG_DIR:-"$HOME/.config"}"
declare -xr XDG_STATE_HOME="${TESTNVIM_STATE_DIR:-"$HOME/.local/state"}"
declare -xr XDG_DATA_HOME="${TESTNVIM_DATA_DIR:-"$HOME/.local/share"}"
declare -xr XDG_CACHE_HOME="${TESTNVIM_CACHE_DIR:-"$HOME/.cache"}"
declare -xr TESTNVIM_RTP_DIR=${TESTNVIM_RTP_DIR:-"${XDG_STATE_HOME}/${NVIM_APPNAME}/"}


function check_neovim_min_version() {
    local verify_version_cmd='if !has("nvim-0.9") | cquit | else | quit | endif'

    # exit with an error if min_version not found
    if ! nvim --headless -u NONE -c "$verify_version_cmd"; then
        echo "[WARN]: Neovim v0.9 not satisfied. Appname defaults to 'nvim'."
        APP_NAME_SUPPORTED=0
    fi
}

function print_logo() {
    cat <<'EOF'
     ____ ____ ____ ____ ____ ____ ____
    ||T |||e |||s |||t |||V |||i |||m ||
    ||__|||__|||__|||__|||__|||__|||__||
    |/__\|/__\|/__\|/__\|/__\|/__\|/__\|

EOF
}

declare -a __qvim_dirs=(
    "$XDG_CONFIG_HOME"
)

function usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --appname <name>     Set the Neovim appname. Default is 'tvim'."
    echo "  --ssh                Use SSH for git clone (default is HTTPS)."
    echo "  -h, --help           Show this help message and exit."
}

function msg() {
    local text="$1"
    local div_width="80"
    printf "%${div_width}s\n" ' ' | tr ' ' -
    printf "%s\n" "$text"
}

function parse_arguments() {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --appname)
                NVIM_APPNAME="$2"
                shift
                ;;
            --ssh)
                USE_SSH=1
                ;;
            -h | --help)
                usage
                exit 0
                ;;
        esac
        shift
    done
}

function __backup_dir() {
    local src="$1"
    if [ ! -d "$src" ]; then
        return
    fi
    mkdir -p "$src.old"
    msg "Backing up old $src to $src.old"
    if command -v rsync &>/dev/null; then
        rsync --archive --quiet --backup --partial --copy-links --cvs-exclude "$src"/ "$src.old"
    else
        case "$OS" in
            Darwin)
                cp -R "$src/." "$src.old/."
                ;;
            *)
                cp -r "$src/." "$src.old/."
                ;;
        esac
    fi
}

function clone_tvim() {

    # Check if there's an existing Neovim configuration
    if [ -d "$TESTNVIM_RTP_DIR" ]; then
        echo "An existing TestNvim instance was found in $TESTNVIM_RTP_DIR."
        echo "Would you like to backup and replace it? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            echo "Aborting installation."
            exit 1
        else
            __backup_dir "$TESTNVIM_RTP_DIR"
        fi
    fi
    msg "Cloning TestVim configuration"

    if [ "$USE_SSH" -eq 0 ]; then
        if ! git clone --branch "$TV_BRANCH" \
            "https://github.com/${TV_REMOTE}" "$TESTNVIM_RTP_DIR"; then
            echo "Failed to clone repository. Installation failed."
            exit 1
        fi
    else
        if ! git clone --branch "$TV_BRANCH" \
            "git@github.com:${TV_REMOTE}" "$TESTNVIM_RTP_DIR"; then
            echo "Failed to clone repository. Installation failed."
            exit 1
        fi
    fi
}

function generate_user_config() {
    # Check if there's an existing user configuration
    if [ -d "$XDG_CONFIG_HOME/$NVIM_APPNAME" ]; then
        echo "An existing Neovim configuration was found in $XDG_CONFIG_HOME/$NVIM_APPNAME."
        echo "Would you like to backup and replace it? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            echo "Aborting installation."
            exit 1
        else
            __backup_dir "$XDG_CONFIG_HOME/$NVIM_APPNAME"
        fi
        rm -rf "${XDG_CONFIG_HOME:?}/${NVIM_APPNAME:?}"
    fi
    mkdir -p "$XDG_CONFIG_HOME/$NVIM_APPNAME"
    cp -r "$TESTNVIM_RTP_DIR/utils/userconf"/* "$XDG_CONFIG_HOME/$NVIM_APPNAME"
}

function setup_tvim() {

    msg "Installing TestVim"

    echo "Preparing Lazy setup"

    chmod +x "$TESTNVIM_RTP_DIR/scripts/tvim"

    if [ -d "$HOME/.local/bin" ]; then
        ln -s "$TESTNVIM_RTP_DIR/scripts/tvim" "$HOME/.local/bin/tvim"
        # if appname supported
        if [ "$APP_NAME_SUPPORTED" -eq 1 ]; then
            tvim --headless -c 'quitall'
        else
            tvim --appname 'nvim' --headless -c 'quitall'
        fi

    else
        msg "Manually link the tvim script to your path"
    fi

    echo "Lazy setup complete"

}

function main() {

    check_neovim_min_version
    parse_arguments "$@"
    print_logo
    clone_tvim
    generate_user_config
    setup_tvim
    msg "Thank you for installing TestVim!!"
}

main "$@"
