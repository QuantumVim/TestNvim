#!/usr/bin/env bash
set -eo pipefail

profile="default"

declare USE_SSH=0
declare -x TESTNVIM_BRANCH="${TESTNVIM_BRANCH:-"main"}"
declare -xr TESTNVIM_REMOTE="${TESTNVIM_REMOTE:-quantumfate/TestNvim.git}"
export TESTNVIM_APPNAME=${TESTNVIM_APPNAME:-"tvim"}
export NVIM_APPNAME="$TESTNVIM_APPNAME"

declare -a URLS=(
    "https://raw.githubusercontent.com/quantumfate/TestNvim/${TESTNVIM_BRANCH}/scripts/vars"
    "https://raw.githubusercontent.com/quantumfate/TestNvim/${TESTNVIM_BRANCH}/scripts/messages"
    "https://raw.githubusercontent.com/quantumfate/TestNvim/${TESTNVIM_BRANCH}/scripts/functions"
)

export TESTNVIM_USER_PROFILE=${TESTNVIM_USER_PROFILE:-"$profile"}
function source_scripts() {
    for VARS_URL in "${URLS[@]}"; do
        temp_file=$(mktemp)

        if curl -LSsO "$VARS_URL"; then
            # shellcheck disable=SC1090
            source "$temp_file"
        else
            echo "Error: Failed to download from $VARS_URL"
            rm -f "$temp_file"
            exit 1
        fi
        rm -f "$temp_file"
    done
}

function print_logo() {
    cat <<'EOF'
     ____ ____ ____ ____ ____ ____ ____ ____
    ||T |||e |||s |||t |||N |||v |||i |||m ||
    ||__|||__|||__|||__|||__|||__|||__|||__||
    |/__\|/__\|/__\|/__\|/__\|/__\|/__\|/__\|

EOF
}

function usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --appname <name>     Set the Neovim appname. Default is 'tvim'."
    echo "  --ssh                Use SSH for git clone (default is HTTPS)."
    echo "  -h, --help           Show this help message and exit."
}

function parse_arguments() {
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --appname)
                NVIM_APPNAME="$2"
                shift
                ;;
            --ssh)
                USE_SSH=1
                ;;
            -h | --help)
                usage
                exit 0
                ;;
        esac
        shift
    done
}

function clone_tvim() {

    if [ -d "$TESTNVIM_STATE_DIR" ]; then
        info_msg "An existing TestNvim instance was found in $TESTNVIM_STATE_DIR."
        compact_info_msg "Would you like to backup and replace it? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            compact_error_msg "Aborting installation."
            exit 1
        else
            __backup_dir "$TESTNVIM_STATE_DIR"
        fi
    fi
    info_msg "[INFO]: Cloning plugin: ${TESTNVIM_APPNAME} into: ${TESTNVIM_STATE_DIR}"
    local url=""
    if [ "$USE_SSH" -eq 0 ]; then
        url+="https://github.com/"
    else
        url+="git@github.com:"
    fi
    output=$(git clone --branch "${TESTNVIM_BRANCH}" "${url}${TESTNVIM_REMOTE}" "${TESTNVIM_STATE_DIR}" 2>&1)
    if [ ! "$output" ]; then
        echo "$output" | tail -n +2 | while IFS= read -r line; do
            compact_error_msg "$line"
        done
        exit 1
    fi
    compact_success_msg "Successfully cloned TestNvim."
}

function generate_user_config() {

    if [ -d "$TESTNVIM_CONFIG_PROFILE" ]; then
        info_msg "An existing Neovim configuration was found in $TESTNVIM_CONFIG_PROFILE."
        compact_info_msg "Would you like to backup and replace it? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            compact_error_msg "Aborting installation."
            exit 1
        else
            __backup_dir "$TESTNVIM_CONFIG_PROFILE"
        fi
        rm -rf "${TESTNVIM_CONFIG_PROFILE:?}"
    fi
    mkdir -p "$TESTNVIM_CONFIG_PROFILE"
    cp -r "$TESTNVIM_STATE_DIR/utils/conf"/* "$TESTNVIM_CONFIG_PROFILE"
    compact_success_msg "Successfully generated user configuration."
}

function setup_tvim() {

    info_msg "Installing TestNvim"
    compact_info_msg "Preparing Lazy setup"
    chmod +x "$TESTNVIM_RTP_DIR/scripts/tvim"
    if [ -d "$HOME/.local/bin" ]; then
        ln -s "$TESTNVIM_RTP_DIR/scripts/tvim" "$HOME/.local/bin/tvim"
        tvim --headless -c 'quitall'
    else
        compact_warn_msg "Manually link the script '${TESTNVIM_STATE_DIR}/scripts/tvim' to your path"
    fi
    compact_success_msg "TestNvim intsallation complete."
}

function main() {

    source_scripts
    parse_arguments "$@"
    print_logo
    clone_tvim
    generate_user_config
    setup_tvim
    compact_info_msg "Thank you for installing TestNvim!!"
}

main "$@"
