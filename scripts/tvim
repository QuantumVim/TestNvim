#!/usr/bin/env bash
set -eo pipefail

current_script_path=$(readlink -f "${BASH_SOURCE[0]}")
current_script_dir=$(dirname "$current_script_path")

source "$current_script_dir/messages"
source "$current_script_dir/functions"

persisting=false
testing=false
profile="default"
freeze=false
plenary_url="https://github.com/nvim-lua/plenary.nvim.git"
structlog_url="https://github.com/Tastyep/structlog.nvim.git"
clear=false

print_usage() {
    printf "Usage: %s [OPTIONS]\n" "$(basename "$0")"
    printf "  --profile                   The profile to use. (Optional, default: default)\n"
    printf "  --clear                     Clear the last temporary session. Prepares for a new fresh session. (Optional)\n"
    printf "  --persist                   Use default Neovim's standard user directories appended with a profile instead of temporary directories. (Optional, default: false)\n"
    printf "  --freeze                    Copy all files from the /tmp/XDG directories to the real XDG directories. Not to be used with --persist. (Optional, default: false)\n"
    printf "  --testing                   Run tests in headless mode. This enables the -x options. (Optional, default: false)\n"
    printf "  -x, --test-arg              Pass an argument to the test runner. (Optional, default: none)\n"
    printf "  --plenary-url               The URL to clone plenary from. (Optional, default: https://github.com/nvim-lua/plenary.nvim.git)\n"
    printf "  --structlog-url             The URL to clone structlog from. (Optional, default: https://github.com/Tastyep/structlog.nvim.git)\n"
    printf "  -h, --help                  Show this help message and exit.\n"
}

while (( "$#" )); do
    case "$1" in
        --profile)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                profile=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        --freeze)
            freeze=true
            shift
            ;;
        --testing)
            testing=true
            shift
            ;;
        --clear)
            clear=true
            shift
            ;;
        -x|--test-arg)
            if [ "$testing" = true ]; then
                if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                    test_arg=$2
                    shift 2
                else
                    echo "Error: Argument for $1 is missing" >&2
                    exit 1
                fi
            else
                echo "Error: $1 is only valid when --testing is set" >&2
                exit 1
            fi
            ;;
        --persist)
            persisting=true
            shift
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        --plenary-url)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                plenary_url=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        --structlog-url)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                structlog_url=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        *)
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

if [ "$clear" = true ]; then
    info_msg "Clearing last session..."
    rm /tmp/testnvim/vars.sh
fi

if [ "$freeze" = true ] && [ "$persisting" = true ]; then
    error_msg "Error: --freeze and --persist cannot be used together" >&2
    exit 1
fi

export TESTNVIM_APPNAME=${TESTNVIM_APPNAME:-"tvim"}
export NVIM_APPNAME="$TESTNVIM_APPNAME"

function tvim_tmp(){
    mktemp -d --suffix="-${TESTNVIM_APPNAME}-$profile-$1"
}

if [ "$persisting" = false ]; then
    if [ -f /tmp/testnvim/vars.sh ]; then
        source /tmp/testnvim/vars.sh
        if [ "$profile" != "$TESTNVIM_USER_PROFILE" ]; then
            warn_msg "[WARN]: Please clear your last session with '--clear' before creating a new profile."
        fi
    else
        TESTNVIM_CACHE_PROFILE="$(tvim_tmp "cache")"
        TESTNVIM_DATA_PROFILE="$(tvim_tmp "data")"
        TESTNVIM_LOG_PROFILE="$(tvim_tmp "log")"

        mkdir -p /tmp/testnvim
        {
            echo "export TESTNVIM_USER_PROFILE=$profile";
            echo "export TESTNVIM_CACHE_PROFILE=$TESTNVIM_CACHE_PROFILE" ;
            echo "export TESTNVIM_DATA_PROFILE=$TESTNVIM_DATA_PROFILE" ;
            echo "export TESTNVIM_LOG_PROFILE=$TESTNVIM_LOG_PROFILE" ;
        } > /tmp/testnvim/vars.sh
    fi
fi

export TESTNVIM_USER_PROFILE=${TESTNVIM_USER_PROFILE:-"$profile"}
source "$current_script_dir/vars"

info_msg "[INFO]: Using profile: $TESTNVIM_USER_PROFILE"
declare -a persisting_dirs=(
    # order matters
    "$XDG_DATA_HOME/$TESTNVIM_APPNAME/$TESTNVIM_USER_PROFILE"
    "$XDG_CACHE_HOME/$TESTNVIM_APPNAME/$TESTNVIM_USER_PROFILE"
    "$XDG_LOG_HOME/$TESTNVIM_APPNAME/$TESTNVIM_USER_PROFILE"
)
declare -a old_tmp_dirs=(
    # order matters
    "$TESTNVIM_DATA_PROFILE"
    "$TESTNVIM_CACHE_PROFILE"
    "$TESTNVIM_LOG_PROFILE"
)

TESTNVIM_PACK_DIR="${TESTNVIM_DATA_PROFILE}/after/pack/lazy/opt"
TESTNVIM_PLENARY_DIR="${TESTNVIM_PACK_DIR}/plenary"
TESTNVIM_STRUCTLOG_DIR="${TESTNVIM_PACK_DIR}/structlog"

declare -xr TESTNVIM_PACK_DIR TESTNVIM_PLENARY_DIR TESTNVIM_STRUCTLOG_DIR

### Creates a new persisting profile
function create_persisting_profile() {

    echo "[INFO]: Preparing profile: $TESTNVIM_USER_PROFILE"

    for dir in "${persisting_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo "[INFO]: Created profile directory: $dir"
        else
            echo "[INFO]: Using existing profile directory: $dir"
        fi
    done

    echo "[INFO]: Profile prepared successfully."
}

### Freezes the last session into a persisting state
function freeze_config() {

    echo "Freezing configuration..."
    declare -a existing_dirs=()

    for dir in "${persisting_dirs[@]}"; do
        if [ -d "$dir" ]; then
            existing_dirs+=("$dir")
        fi
    done

    if [ "${#existing_dirs[@]}" -gt 0 ]; then
        echo "Existing profiles detected:"
        for dir in "${existing_dirs[@]}"; do
            echo "  $dir"
        done
        echo "Would you like to backup and replace them? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            echo "Aborting freeze."
            exit 1
        else
            for dir in "${existing_dirs[@]}"; do
                __backup_dir "$dir" "$dir/after/pack/lazy/opt/*"
            done
        fi
    fi

    for i in "${!old_tmp_dirs[@]}"; do
        mkdir -p "${persisting_dirs[$i]}"
        cp -r "${old_tmp_dirs[$i]}/." "${persisting_dirs[$i]}"
    done

    rm /tmp/testnvim/vars.sh
    info_msg "[INFO]: Use this profile with: $TESTNVIM_APPNAME --persist --profile $TESTNVIM_USER_PROFILE"
    info_msg "Freeze complete."
}

function print_tvim_config(){
    echo ""
    echo "TestNvim configuration:"
    echo "  Profile: ${TESTNVIM_USER_PROFILE}"
    echo "  Cache dir: $TESTNVIM_CACHE_PROFILE"
    echo "  State dir: $TESTNVIM_STATE_DIR"
    echo "  Data dir: $TESTNVIM_DATA_PROFILE"
    echo "  Config dir: $TESTNVIM_CONFIG_PROFILE"
    echo "  Log dir: $TESTNVIM_LOG_PROFILE"
    echo ""

}

function clone_plugins() {
    declare -a plugins=(
        # order matters
        "$plenary_url"
        "$structlog_url"
    )

    declare -a plugin_dirs=(
        # order matters
        "$TESTNVIM_PLENARY_DIR"
        "$TESTNVIM_STRUCTLOG_DIR"
    )
    # clone the plugins when they don't exist yet
    mkdir -p "${TESTNVIM_PACK_DIR}"
    for i in "${!plugins[@]}"; do
        if [ ! -d "${plugin_dirs[$i]}" ]; then
            info_msg "[INFO]: Cloning plugin: ${plugins[$i]} into: ${plugin_dirs[$i]}"
            output=$(git clone "${plugins[$i]}" "${plugin_dirs[$i]}" 2>&1)

            if [ ! "$output" ]; then
                echo "$output" | tail -n +2 | while IFS= read -r line; do
                    warn_msg "$line"
                done
            fi
        fi
    done
}

function create_user_config() {
    if [ ! -d "$TESTNVIM_CONFIG_PROFILE" ]; then
        mkdir -p "$TESTNVIM_CONFIG_PROFILE"
        cp -r "$TESTNVIM_STATE_DIR/utils/conf"/* "$TESTNVIM_CONFIG_PROFILE"
        info_msg "[INFO]: Created config profile: $TESTNVIM_CONFIG_PROFILE"
    else
        info_msg "[INFO]: Using existing config profile: $TESTNVIM_CONFIG_PROFILE"
    fi
}

# Run tests in the user config directory
function test_nvim() {
    # shellcheck disable=SC2086
    nvim -u "${TESTNVIM_CONFIG_PROFILE}/tests/minimal_init.lua" \
        "$@" $PARAMS
}

# Run neovim
function run_nvim() {
    # shellcheck disable=SC2086
    nvim -u "${TESTNVIM_STATE_DIR}/init.lua" \
        $PARAMS
}

function setup() {
    if [ "$freeze" = true ]; then
        freeze_config
        exit 0
    fi

    clone_plugins

    create_user_config

    if [ "$persisting" = true ] ; then
        create_persisting_profile
    fi

    print_tvim_config

    if [ -n "$PARAMS" ]; then
        info_msg "[INFO]: Neovim parameters: $PARAMS"
    fi


    if [ "$testing" = true ]; then
        if [ -n "$test_arg" ]; then
            test_nvim --headless -c "lua require('plenary.busted').run('$test_arg')"
        else
            test_nvim --headless -c "PlenaryBustedDirectory ${TESTNVIM_CONFIG_PROFILE}/tests/specs { minimal_init = '${TESTNVIM_CONFIG_PROFILE}/tests/minimal_init.lua' }"
        fi
    else
        run_nvim
    fi
}

setup
