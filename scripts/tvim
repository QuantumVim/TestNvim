#!/usr/bin/env bash
set -eo pipefail

persisting=false
testing=false
test_file="minimal_init.lua"
appname="tvim"
clear_instance=false
freeze=false

print_usage() {
    printf "Run a neovim instance with the specified configuration. The Neovim XDG directories are set to temporary directories which are persisted between runs\n"
    printf "unless the --persist flag is set. In this case, the default Neovim XDG directories appended with the appname are used.\n"
    printf "\nPlenary and structlog are cloned into the packpath if they don't exist yet and will always be in the runtime path.\n"
    printf "\nUsage: %s [-a appname] [-i init_file] [--testing] [-t test_file] [-x test_arg] [-c] [-p] [--freeze]\n" "$0"
    printf "\nOptions:\n"
    printf "  -a, --appname APPNAME       Specify the appname to use. Default is 'tvim'. (Optional)\n"
    printf "  --testing                   Run tests in headless mode. This enables the -t and -x options. (Optional)\n"
    printf "  -t, --test-file FILENAME    Specify the test file to use. Only valid when --testing is set. Default is 'minimal_init.lua'. (Optional)\n"
    printf "  -x, --test-arg ARG          Specify an argument for the plenary busted lua call. Only valid when --testing is set. (Optional)\n"
    printf "  -r, --remove                Force the script start with a fresh instance of neovim. This will remove the reference to the last /tmp folder\n"
    printf "                              or removes the persisted folders when --persist is set. Consider setting the appname explicitly when you used a different appname before (Optional)\n"
    printf "  --persist                   Use default Neovim's standard user directories instead of temporary directories. (Optional)\n"
    printf "  --freeze                    Copy all files from the /tmp/XDG directories to the real XDG directories. Not to be used with --persist. (Optional)\n"
    printf "  -h, --help                  Show this help message and exit.\n"
}

while (( "$#" )); do
    case "$1" in
        -a|--appname)
            if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                appname=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        --freeze)
            freeze=true
            shift
            ;;
        --testing)
            testing=true
            shift
            ;;
        -t|--test-file)
            if [ "$testing" = true ]; then
                if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                    printf "[INFO]: None standard test file detected: %s." "$2"
                    printf "[INFO]: Ensure runtime path is properly configured."
                    test_file=$2
                    shift 2
                else
                    echo "Error: Argument for $1 is missing" >&2
                    exit 1
                fi
            else
                echo "Error: $1 is only valid when --testing is set" >&2
                exit 1
            fi
            ;;
        -x|--test-arg)
            if [ "$testing" = true ]; then
                if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
                    test_arg=$2
                    shift 2
                else
                    echo "Error: Argument for $1 is missing" >&2
                    exit 1
                fi
            else
                echo "Error: $1 is only valid when --testing is set" >&2
                exit 1
            fi
            ;;
        -r|--remove)
            clear_instance=true
            shift
            ;;
        --persist)
            persisting=true
            shift
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

declare -xr NVIM_APPNAME="$appname"

function tvim_tmp(){
    local path
    path="$(mktemp -d --suffix="${NVIM_APPNAME}")"
    mkdir -p "${path}/${NVIM_APPNAME}"
    echo "${path}/${NVIM_APPNAME}"
}

if [ "$freeze" = true ] && [ "$persisting" = true ]; then
    echo "Error: --freeze and --persist modes are mutually exclusive."
    exit 1
fi

if [ "$clear_instance" = true ]; then
    if [ -f /tmp/testnvim/vars.sh ]; then
        rm -f /tmp/testnvim/vars.sh
    fi
    if [ "$persisting" = true ]; then
        rm -rf "$HOME/.local/share/$appname"
        rm -rf "$HOME/.cache/$appname"
    fi
fi

if [ "$persisting" = false ]; then
    if [ -f /tmp/testnvim/vars.sh ]; then
        source /tmp/testnvim/vars.sh
    else
        TESTNVIM_CACHE_DIR="$(tvim_tmp)"
        TESTNVIM_DATA_DIR="$(tvim_tmp)"

        mkdir -p /tmp/testnvim
        echo "export TESTNVIM_CACHE_DIR=$TESTNVIM_CACHE_DIR" > /tmp/testnvim/vars.sh
        echo "export TESTNVIM_DATA_DIR=$TESTNVIM_DATA_DIR" >> /tmp/testnvim/vars.sh
    fi
fi

TESTNVIM_APP_NAME_SUPPORTED=1

verify_version_cmd='if !has("nvim-0.9") | cquit | else | quit | endif'

# exit with an error if min_version not found
if ! nvim --headless -u NONE -c "$verify_version_cmd"; then
    echo "[WARN]: Neovim v0.9 not satisfied. Appname defaults to 'nvim'."
    TESTNVIM_APP_NAME_SUPPORTED=0
fi

declare -xr TESTNVIM_APP_NAME_SUPPORTED

declare -x XDG_STATE_HOME="${TESTNVIM_STATE_DIR:-"$HOME/.local/state"}"
declare -x XDG_CONFIG_HOME="${TESTNVIM_CONFIG_DIR:-"$HOME/.config"}"
declare -x XDG_DATA_HOME="${TESTNVIM_DATA_DIR:-"$HOME/.local/share"}"
declare -x XDG_CACHE_HOME="${TESTNVIM_CACHE_DIR:-"$HOME/.cache"}"
declare -xr TESTNVIM_LOG_DIR="${TESTNVIM_LOG_DIR:-"$HOME/.local/log/$NVIM_APPNAME"}"
declare -xr TESTNVIM_STATE_DIR="${TESTNVIM_STATE_DIR:"$XDG_STATE_HOME/$NVIM_APPNAME"}"
declare -xr TESTNVIM_CONFIG_DIR="${TESTNVIM_CONFIG_DIR:"$XDG_CONFIG_HOME/$NVIM_APPNAME"}"
declare -xr TESTNVIM_DATA_DIR="${TESTNVIM_DATA_DIR:"$XDG_DATA_HOME/$NVIM_APPNAME"}"
declare -xr TESTNVIM_CACHE_DIR="${TESTNVIM_CACHE_DIR:"$XDG_CACHE_HOME/$NVIM_APPNAME"}"

mkdir -p "$TESTNVIM_LOG_DIR"

function freeze_config() {
    # Check if there's any existing directory in the real XDG directories
    if [ -d "$HOME/.local/share/$NVIM_APPNAME" ] || [ -d "$HOME/.cache/$NVIM_APPNAME" ]; then
        echo "Existing directories found in the real XDG directories."
        echo "Would you like to backup and replace them? (y/n)"
        read -r answer

        if [[ "$answer" != "y" ]]; then
            echo "Aborting freeze."
            exit 1
        else
            __backup_dir "$HOME/.local/share/$appname"
            __backup_dir "$HOME/.cache/$appname"
        fi
    fi

    echo "Freezing configuration..."
    mkdir -p "$HOME/.local/share/$NVIM_APPNAME"
    mkdir -p "$HOME/.cache/$NVIM_APPNAME"
    cp -r "$TESTNVIM_DATA_DIR/." "$HOME/.local/share/$NVIM_APPNAME/"
    cp -r "$TESTNVIM_CACHE_DIR/." "$HOME/.cache/$NVIM_APPNAME/"
    echo "Freeze complete."
}

echo ""
echo "TestNvim configuration:"
echo "appname: $NVIM_APPNAME"
echo "cache dir: $TESTNVIM_CACHE_DIR"
echo "state dir: $TESTNVIM_STATE_DIR"
echo "data dir: $TESTNVIM_DATA_DIR"
echo "config dir: $TESTNVIM_CONFIG_DIR"
echo "log dir: $TESTNVIM_LOG_DIR"
echo ""

if [ -n "$PARAMS" ]; then
    echo "Neovim parameters: $PARAMS"
fi

TESTNVIM_PACK_DIR="${TESTNVIM_DATA_DIR}/after/pack/lazy/opt"
TESTNVIM_PLENARY_DIR="${TESTNVIM_PACK_DIR}/plenary"
TESTNVIM_STRUCTLOG_DIR="${TESTNVIM_PACK_DIR}/structlog"

declare -xr TESTNVIM_PACK_DIR TESTNVIM_PLENARY_DIR TESTNVIM_STRUCTLOG_DIR

# clone the plugins when they don't exist yet
mkdir -p "${TESTNVIM_PACK_DIR}"
if [ ! -d "${TESTNVIM_PLENARY_DIR}" ]; then
    git clone https://github.com/nvim-lua/plenary.nvim.git "${TESTNVIM_PLENARY_DIR}"
fi
if [ ! -d "${TESTNVIM_STRUCTLOG_DIR}" ]; then
    git clone https://github.com/Tastyep/structlog.nvim.git "${TESTNVIM_STRUCTLOG_DIR}"
fi

# Run tests in the user config directory
function test_nvim() {
    # shellcheck disable=SC2086
    nvim -u "${TESTNVIM_CONFIG_DIR}/tests/$test_file" \
        "$@" $PARAMS
}

# Run neovim
function run_nvim() {
    # shellcheck disable=SC2086
    nvim -u "${TESTNVIM_STATE_DIR}/init.lua" \
        $PARAMS
}

function setup() {
    if [ "$freeze" = true ]; then
        freeze_config
        exit 0
    fi

    if [ "$testing" = true ]; then
        if [ -n "$test_arg" ]; then
            test_nvim --headless -c "lua require('plenary.busted').run('$test_arg')"
        else
            test_nvim --headless -c "PlenaryBustedDirectory tests/specs { minimal_init = './tests/$test_file' }"
        fi
    else
        run_nvim
    fi
}

setup
